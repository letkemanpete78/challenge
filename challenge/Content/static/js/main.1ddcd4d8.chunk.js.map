{"version":3,"sources":["Table.js","Form.js","App.js","index.js"],"names":["TableHeader","TableBody","props","rows","characterData","map","row","index","onClick","onClickHandler","ID","FirstName","LastName","Email","removeCharacter","Table","class","setCleared","val","cleared","document","getElementById","innerHTML","Form","handleChange","id","event","target","name","value","setState","onFormSubmit","preventDefault","state","editRecord","handleSubmit","initialState","clearValues","this","buttonValue","console","log","isCleared","onSubmit","style","type","htmlFor","onChange","e","Component","App","characters","handleHTTPGetError","handleHTTPDeleteError","handleHTTPPostError","deleteUUID","filter","character","i","fetch","deleteurl","method","catch","error","tempRecord","posturl","uuid","data","JSON","stringify","headers","body","filtered","newListing","then","result","json","entry","className","ReactDOM","render"],"mappings":"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","file":"static/js/main.1ddcd4d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst TableHeader = () => {\r\n    return (\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th>First Name</th>\r\n                <th>Last Name</th>\r\n                <th>Email</th>\r\n                <th>Remove</th>\r\n            </tr>\r\n        </thead>\r\n    );\r\n}\r\n\r\nconst TableBody = props => {\r\n    const rows = props.characterData.map((row, index) => {\r\n        return (\r\n            <tr key={index} onClick={() =>  props.onClickHandler(row.ID)}>\r\n                <td>Edit</td>\r\n                <td>{row.FirstName}</td>\r\n                <td>{row.LastName}</td>\r\n                <td>{row.Email}</td>\r\n                <td><button onClick={() => props.removeCharacter(index)}>Delete</button></td>\r\n            </tr>\r\n        );\r\n    });\r\n    return <tbody>{rows}</tbody>;\r\n}\r\n\r\nconst Table = (props) => {\r\n    const { characterData, removeCharacter,onClickHandler } = props;\r\n    return (\r\n        <div class=\"scroll\">\r\n            <table class=\"striped-table\">\r\n                <TableHeader />\r\n                <TableBody characterData={characterData} removeCharacter={removeCharacter} onClickHandler={onClickHandler}/>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.initialState = {\r\n            ID: '',\r\n            FirstName: '',\r\n            LastName: '',\r\n            Email: '',\r\n        };\r\n        this.state = this.initialState;\r\n    }\r\n\r\n    handleChange = (id, event) => {\r\n        const { name, value } = event.target;\r\n        this.setState({\r\n            [name]: value,\r\n            ID: id,\r\n            \r\n        });\r\n    }\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        let { FirstName, LastName, Email } = this.state;\r\n        if (this.props.editRecord != null) {\r\n            if (FirstName === \"\") {\r\n                FirstName = this.props.editRecord.FirstName;\r\n            }\r\n            if (LastName === \"\") {\r\n                LastName = this.props.editRecord.LastName;\r\n            }\r\n            if (Email === \"\") {\r\n                Email = this.props.editRecord.Email;\r\n            }\r\n        }\r\n        this.props.handleSubmit(FirstName,LastName,Email, this.state.ID);\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    clearValues = (event) => {\r\n        setCleared(\"true\");\r\n        this.setState(this.initialState);\r\n    }\r\n\r\n    render() {\r\n        let { FirstName, LastName, Email, ID} = this.state;\r\n        let buttonValue = 'Add Record'\r\n        \r\n        if (isCleared()) {\r\n            FirstName = '';\r\n            LastName = '';\r\n            Email = '';\r\n            ID = '';\r\n        } else {\r\n            setCleared(false);\r\n        if (this.props.editRecord != null) {\r\n            \r\n            buttonValue = 'Update Record'\r\n            if (ID !== \"\") {\r\n                if (FirstName === \"\") {\r\n                    FirstName = this.props.editRecord.FirstName;\r\n                }\r\n                if (LastName === \"\") {\r\n                    LastName = this.props.editRecord.LastName;\r\n                }\r\n                if (Email === \"\") {\r\n                    Email = this.props.editRecord.Email;\r\n                }\r\n            } else {\r\n                FirstName = this.props.editRecord.FirstName;\r\n                LastName = this.props.editRecord.LastName;\r\n                Email = this.props.editRecord.Email;\r\n                ID = this.props.editRecord.ID;\r\n            }\r\n        }\r\n        }\r\n\r\n        return (\r\n            <span>\r\n            <h3>{buttonValue}</h3>\r\n            <form onSubmit={this.onFormSubmit}>\r\n                <span style={{\"display\":\"none\"}} id=\"cleared\">false</span>\r\n                <input type=\"hidden\" value={ID} name=\"ID\" id=\"ID\" />\r\n                <label htmlFor=\"FirstName\">First Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"FirstName\"\r\n                    id=\"FirstName\"\r\n                    value={FirstName}\r\n                    onChange={(e) => this.handleChange(ID, e)} />\r\n                <label htmlFor=\"LastName\">Last Name</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"LastName\"\r\n                    id=\"LastName\"\r\n                    value={LastName}\r\n                    onChange={(e) => this.handleChange(ID, e)} />\r\n\r\n                <label htmlFor=\"Email\">Email</label>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"Email\"\r\n                    id=\"Email\"\r\n                    value={Email}\r\n                    onChange={(e) => this.handleChange(ID, e)} />\r\n                <button type=\"submit\">\r\n                    {buttonValue}\r\n                </button>\r\n                <span>&nbsp;</span>\r\n                <button type=\"button\"\r\n                    onClick={(e) => this.clearValues(e)}>\r\n                    Clear Values\r\n                </button>\r\n            </form>\r\n            </span>\r\n        );\r\n    }\r\n}\r\nfunction isCleared(){\r\n    let cleared = document.getElementById(\"cleared\");\r\n    if (cleared === null){\r\n        console.log('not found!');\r\n        return false;\r\n    } else {\r\n        return cleared.innerHTML === \"true\";\r\n    }\r\n}\r\nfunction setCleared(val){\r\n    let cleared = document.getElementById(\"cleared\");\r\n    if (cleared !== null){\r\n        cleared.innerHTML = val;\r\n    }\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport Table from './Table';\r\nimport Form from './Form';\r\nimport uuid from 'uuid-random';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    characters: [],\r\n    editRecord: null\r\n  };\r\n\r\n  componentDidMount() {\r\n    const listurl = \"http://localhost:49713/api/ContactAPI\";\r\n    fetch(listurl)\r\n      .then(result => result.json())\r\n      .then(result => {\r\n        this.setState({\r\n          characters: result\r\n        })\r\n      }).catch(error => this.handleHTTPGetError(error));\r\n  }\r\n\r\n\r\n  handleHTTPGetError = (e) => {\r\n    console.log('Failed to fetch via get.');\r\n  }\r\n\r\n  handleHTTPDeleteError = (e) => {\r\n    console.log('Failed to fetch via delete.');\r\n  }\r\n\r\n  handleHTTPPostError = (e) => {\r\n    console.log('Failed to fetch via post.');\r\n  }\r\n\r\n  removeCharacter = index => {\r\n    const { characters } = this.state;\r\n    const deleteurl = \"http://localhost:49713/api/ContactAPI\";\r\n\r\n    let deleteUUID = \"\";\r\n    this.setState({\r\n      characters: characters.filter((character, i) => {\r\n        deleteUUID = character.ID;\r\n        return i !== index;\r\n      })\r\n    });\r\n\r\n    fetch(deleteurl + \"/\" + deleteUUID, {\r\n      method: 'DELETE'\r\n    }).catch(error => this.handleHTTPDeleteError(error));\r\n  }\r\n\r\n  onClickHandler = (e) => {\r\n    const { characters } = this.state;\r\n\r\n    setCleared(false);\r\n    let tempRecord = characters.filter((character, i) => {\r\n      return e === character.ID;\r\n    })\r\n\r\n    this.setState({\r\n      editRecord: tempRecord[0]\r\n    });\r\n  }\r\n\r\n\r\n  handleSubmit = (FirstName, LastName, Email, ID) => {\r\n\r\n    if ((FirstName === LastName) && (Email === LastName)) {\r\n      return false;\r\n    }\r\n    let method = \"PUT\";\r\n    let posturl = \"http://localhost:49713/api/ContactAPI\";\r\n    if (ID === \"\") {\r\n      method = \"POST\";\r\n      ID = uuid();\r\n    } else {\r\n      posturl = posturl + \"/\" + ID;\r\n    }\r\n\r\n    const character = { \"FirstName\":FirstName, \"LastName\":LastName, \"Email\":Email , \"ID\":ID};\r\n    let data = JSON.stringify(character);\r\n\r\n    fetch(posturl, {\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      method: method,\r\n      body: data\r\n    }).catch(error => this.handleHTTPPostError(error));\r\n\r\n    const { characters } = this.state;\r\n    const filtered = characters.filter((character, i) => {\r\n      return (ID !== character.ID)\r\n    });\r\n    \r\n    const newListing = [...filtered, character];\r\n    \r\n    this.setState({\r\n      characters: newListing,\r\n\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { characters, editRecord } = this.state;\r\n\r\n    const result = characters.map((entry, index) => {\r\n      return entry;\r\n    });\r\n\r\n    return (\r\n      <div className=\"container\">\r\n\r\n        <Table\r\n          onClickHandler={this.onClickHandler}\r\n          characterData={result}\r\n          removeCharacter={this.removeCharacter}\r\n        />\r\n        \r\n        <Form handleSubmit={this.handleSubmit} editRecord={editRecord} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction setCleared(val){\r\n  let cleared = document.getElementById(\"cleared\");\r\n  if (cleared !== null){\r\n      cleared.innerHTML = val;\r\n  }\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}